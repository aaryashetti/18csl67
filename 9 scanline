#define BLACK 0
#include<stdlib.h>
#include<stdio.h>
#include<GL/glut.h>
Int submenu;
Float x1,x2,x3,x4,y1,y2,y3,y4;
Void edgedetect(float x1,float y1,float x2,float y2,int *le,int *re)
{
Float mx,x,temp;
Int I;
If((y2-y1)<0)
{
Temp=y1;y1=y2;y2=temp;
Temp=x1;x1=x2;x2=temp;
}
If((y2-y1)!=0)
Mx=(x2-x1)/(y2-y1);
Else
Mx=x2-x1;
X=x1;
For(i=y1;i<=y2;i++)
{
If(x<(float)le[i])
Le[i]=(int)x;
If(x>(float)re[i])
Re[i]=(int)x;
X+=mx;
}
}

Void draw_pixel(int x,int y,int value)
{
glBegin(GL_POINTS);
glVertex2i(x,y);
glEnd();
}
Void scanfill(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4)
{
Int le[500],re[500];
Int I,y;
For(i=0;i<500;i++)
{
Le[i]=500;
Re[i]=0;
}
Edgedetect(x1,y1,x2,y2,le,re);
Edgedetect(x2,y2,x3,y3,le,re);
Edgedetect(x3,y3,x4,y4,le,re);
Edgedetect(x4,y4,x1,y1,le,re);
For(y=0;y<500;y++)
{
If(le[y]<=re[y])
For(i=(int)le[y];i<(int)re[y];i++)
Draw_pixel(I,y,BLACK);

}
}
Void display()
{

X1=200.0;y1=200.0;x2=100.0;y2=300.0;x3=200.0;
Y3=400.0,x4=300.0;y4=300.0;
glBegin(GL_LINE_LOOP);
glVertex2f(x1,y1);
glVertex2f(x2,y2);
glVertex2f(x3,y3);
glVertex2f(x4,y4);
glEnd();
scanfill(x1,y1,x2,y2,x3,y3,x4,y4);
glFlush();
}

Void myinit()
{
glClearColor(1.0,1.0,1.0,1.0);
glPointSize(1.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0,499.0,0.0,499.0);
}
Void menufunc(int n)
{
Switch(n)
{
Case 1:
glColor3f(1.0,0.0,0.0);
break;
case 2:glColor3f(0.0,1.0,0.0);
break;

case 3: glColor3f(0.0,0.0,1.0);
break;
}
}
Int main(int argc,char **argv)
{
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
glutInitWindowSize(500,500);
glutInitWindowPosition(0,0);
glutCreateWindow(“Filling a polygon using scan-line algorithm”);
submenu=glutCreateMenu(menufunc);
glutCreateMenu(menufunc);
glutAddMenuEntry(“RED”,1);
glutAddMenuEntry(“GREEN”,2);
glutAddMenuEntry(“BLUE”,3);
glutAttachMenu(GLUT_RIGHT_BUTTON);
glutDisplayFunc(display);
myinit();
glutMainLoop();
return 0;
}
